/*
 * @lc app=leetcode id=924 lang=cpp
 *
 * [924] Minimize Malware Spread
 */

// @lc code=start
class Solution
{
    unordered_map<int, int> U;

    int find(int v)
    {
        if (!U.count(v))
        {
            U[v] = v;
        }
        if (U[v] != v)
        {
            U[v] = find(U[v]);
        }
        return U[v];
    }

    void uni(int x, int y)
    {
        x = find(x);
        y = find(y);
        U[x] = y;
    }

public:
    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
    {
        int n = graph.size();
        for (int i = 0; i < n; i++)
        {
            for (int j = i + 1; j < n; j++)
            {
                if (graph[i][j])
                    uni(i, j);
            }
        }

        unordered_map<int, int> UMembers;
        for (int i = 0; i < n; i++)
        {
            UMembers[find(i)]++;
        }

        unordered_map<int, int> UInitialMembers;
        for (int v : initial)
        {
            UInitialMembers[find(v)]++;
        }

        int maxEff = 0;
        int maxIndex = initial[0];
        for (int v : initial)
        {
            maxIndex = min(maxIndex, v);
        }
        for (int v : initial)
        {
            if (UInitialMembers[find(v)] != 1)
                continue;
            if (UMembers[find(v)] > maxEff || (UMembers[find(v)] == maxEff && v < maxIndex))
            {
                maxEff = UMembers[find(v)];
                maxIndex = v;
            }
        }
        return maxIndex;
    }
};
// @lc code=end
